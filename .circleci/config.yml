version: 2.1

parameters:
  action:
    type: string
    default: "redeploy"
  space:
    type: string
    default: "dev"

commands:
  deploy-app:
    steps:
      - run:
         name: CloudGov Deploy
         command: |
           cf target -s $LOG_SHIPPER_SPACE
           ./bin/deploy-logshipper.sh << pipeline.number >>

  setup-services:
    steps:
      - run:
          name: Set up services
          command: |
            cf target -s $LOG_SHIPPER_SPACE
            ./bin/setup-services.sh

  create-route:
    steps:
      - run:
          name: Create and bind route
          command: |
            cf target -s $LOG_SHIPPER_SPACE
            cf create-route app.cloud.gov --hostname usagov-${LOG_SHIPPER_SPACE}-logshipper
            cf map-route log-shipper app.cloud.gov --hostname usagov-${LOG_SHIPPER_SPACE}-logshipper

  bind-services:
    steps:
      - run:
          name: Bind services to app
          command: |
            cf target -s $LOG_SHIPPER_SPACE
            cf bind-service log-shipper newrelic-creds
            cf bind-service log-shipper cg-logshipper-creds
            cf bind-service log-shipper log-storage

  set-proxy:
    steps:
      - run:
          name: Add network policy for egress
          command: |
            cf add-network-policy log-shipper ${LOG_SHIPPER_SPACE}-proxy --protocol tcp --port 61443 -s shared-egress
      - run:
          name: Set PROXYROUTE and restart
          command: |
            cf target -s shared-egress 2>&1 > /dev/null
            proxyroute=$(cf env ${LOG_SHIPPER_SPACE}-proxy | grep proxy_route | awk '{print $2}')
            if [ -z "$proxyroute" ]; then
                 echo "Unable to find route to proxy app for this space"
                 exit 1
            fi
            cf target -s $LOG_SHIPPER_SPACE
            cf set-env log-shipper PROXYROUTE $proxyroute
            cf restart log-shipper --strategy rolling

  setup-log-drains:
    steps:
      - run:
          name: Set up log drains
          command: |
            spacelist=("dev" "stage" "prod" "tools" "shared-egress")
            for space in ${spacelist[@]}; do
               cf target -s $space
               ./bin/add-log-drains-for-space.sh
            done

  install-cloud-foundry:
    steps:
      - run:
          name: Install Cloud Foundry
          command: |
            if command cf > /dev/null; then echo "CF client already installed"; exit 0; fi
            wget --user-agent="Mozilla" -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
            echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
            sudo apt-get update
            sudo apt-get install cf8-cli
            cf -v

  login-cloud-gov:
    steps:
      - run:
          name: Log in to cloud.gov
          command: |
            cf login -a https://api.fr.cloud.gov -u $CF_SERVICE_USER -p $CF_SERVICE_PASS -s $LOG_SHIPPER_SPACE

  setup-log-drain-for-space:
    steps:
      - run:
          name: Set up log drain for a space.
          command: |
             cf target -s << pipeline.parameters.space >>
             ./bin/add-log-drains-for-space.sh


workflows:
  version: 2

  commit:
    jobs:
      - scan-code

  deploy-logshipper:
    when:
      not:
        equal: [ launch, << pipeline.parameters.action >> ]
    jobs:
      - approve-deploy:
          type: approval
          filters:
            branches:
              only:
                - main
      - deploy-app-to-cloudgov-tools:
          filters:
            branches:
              only:
                - main
          requires:
            - approve-deploy

  setup-services-and-deploy:
    when:
      equal: [ launch, << pipeline.parameters.action >> ]
    jobs:
      - approve-launch:
          type: approval
          filters:
            branches:
              only:
                - main
      - setup-services-and-deploy-app:
          filters:
            branches:
              only:
                - main
          requires:
            - approve-launch

  apply-log-drain-to-space:
    when:
      equal: [ add-drain, << pipeline.parameters.action >> ]
    jobs:
      - approve-log-drain:
          type: approval
          filters:
            branches:
              only:
                - main
                - USAGOV-1483-add-logshipper-drain-job
      - setup-log-drain-for-space:
          filters:
            branches:
              only:
                - main
                - USAGOV-1483-add-logshipper-drain-job
          requires:
            - approve-log-drain

jobs:
  scan-code:
    machine:
      image: ubuntu-2004:2023.10.1
    steps:
      - checkout
      - run:
          name: Scan Lua scripts
          when: always
          command: |
            mkdir -p /tmp/results
            touch /tmp/results/scan-lua-scripts.log
            ./bin/scan-lua.sh | tee /tmp/results/scan-lua-scripts.log
      - store_artifacts:
          path: /tmp/results

  deploy-app-to-cloudgov-tools:
    environment:
      LOG_SHIPPER_SPACE: tools
    machine:
      image: ubuntu-2004:2023.10.1
      resource_class: medium
    steps:
      - checkout
      - install-cloud-foundry
      - login-cloud-gov
      - deploy-app

  setup-services-and-deploy-app:
    environment:
      LOG_SHIPPER_SPACE: tools
    machine:
      image: ubuntu-2004:2023.10.1
      resource_class: medium
    steps:
      - checkout
      - install-cloud-foundry
      - login-cloud-gov
      - setup-services
      - deploy-app
      - create-route
      - bind-services
      - set-proxy
      - setup-log-drains

  setup-log-drain-for-space:
    environment:
      LOG_SHIPPER_SPACE: tools
    machine:
      image: ubuntu-2004:2023.10.1
      resource_class: medium
    steps:
      - checkout
      - install-cloud-foundry
      - login-cloud-gov
      - setup-log-drain-for-space
